module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("mongodb");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("winston");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("winston-transport");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ObjectID = __webpack_require__(0).ObjectID;
/**
 * Prepares metadata to store into database.
 * @param {*} meta Metadata
 * @return {*}
 */


exports.prepareMetaData = function (meta) {
  return cloneMeta(meta);
};
/**
 * Clones meta object and cleans it from circular references, replacing them
 * with string '[Circular]' and fixes field names to be storable within
 * MongoDB
 * @param {Object} node Current object or its leaf
 * @param {Array=} opt_parents Object's parents
 */


function cloneMeta(node, opt_parents) {
  if (!(node instanceof Object) || node instanceof ObjectID || node instanceof Buffer) {
    return node;
  }

  var copy = Array.isArray(node) ? [] : {};

  if (node instanceof Date) {
    return new Date(node.getTime());
  } else if (node instanceof Error) {
    // This is needed because Error's message, name and stack isn't accessible when cycling through properties
    copy = {
      message: node.message,
      name: node.name,
      stack: node.stack
    };
  }

  opt_parents = opt_parents || [];
  opt_parents.push(node);

  for (var key in node) {
    if (!Object.prototype.hasOwnProperty.call(node, key)) {
      continue;
    }

    var value = node[key];
    var newKey = key;

    if (newKey.includes('.') || newKey.includes('$')) {
      newKey = newKey.replace(/\./g, '[dot]').replace(/\$/g, '[$]');
    }

    if (value instanceof Object) {
      if (opt_parents.indexOf(value) === -1) {
        copy[newKey] = cloneMeta(value, opt_parents);
      } else {
        copy[newKey] = '[Circular]';
      }
    } else {
      copy[newKey] = value;
    }
  }

  opt_parents.pop();
  return copy;
}

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MongoDB", function() { return MongoDB; });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var winston__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var winston__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(winston__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var winston_transport__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var winston_transport__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(winston_transport__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_helpers__WEBPACK_IMPORTED_MODULE_6__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @module 'mongodb-winston-transport'
 * @fileoverview Mongodb transport for winston
 * @license MIT
 * @author Yogesh Yadav (Yogesh Yadav)
 */







/**
 * Constructor for the MongoDB transport object.
 * @constructor
 * @param {Object} options
 * @param {string=info} options.level Level of messages that this transport
 * should log.
 * @param {boolean=false} options.silent Boolean flag indicating whether to
 * suppress output.
 * @param {string|Object} options.db MongoDB connection uri or preconnected db
 * object.
 * @param {Object} options.options MongoDB connection parameters
 * (optional, defaults to `{poolSize: 2, autoReconnect: true, useNewUrlParser: true}`).
 * @param {string=logs} options.collection The name of the collection you want
 * to store log messages in.
 * @param {boolean=false} options.storeHost Boolean indicating if you want to
 * store machine hostname in logs entry, if set to true it populates MongoDB
 * entry with 'hostname' field, which stores os.hostname() value.
 * @param {string} options.label Label stored with entry object if defined.
 * @param {string} options.name Transport instance identifier. Useful if you
 * need to create multiple MongoDB transports.
 * @param {boolean=false} options.capped In case this property is true,
 * winston-mongodb will try to create new log collection as capped.
 * @param {number=10000000} options.cappedSize Size of logs capped collection
 * in bytes.
 * @param {number} options.cappedMax Size of logs capped collection in number
 * of documents.
 * @param {boolean=false} options.tryReconnect Will try to reconnect to the
 * database in case of fail during initialization. Works only if `db` is
 * a string.
 * @param {boolean=false} options.decolorize Will remove color attributes from
 * the log entry message.
 * @param {boolean=false} options.leaveConnectionOpen Will leave MongoClient connected
 * after transport shut down.
 * @param {number} options.expireAfterSeconds Seconds before the entry is removed.
 * Do not use if capped is set.
 */

var MongoDB = /*#__PURE__*/function (_Transport) {
  _inherits(MongoDB, _Transport);

  var _super = _createSuper(MongoDB);

  function MongoDB(options) {
    var _this;

    _classCallCheck(this, MongoDB);

    _this = _super.call(this, options);
    options = options || {};

    if (!options.db) {
      throw new Error('You should provide db to log to.');
    }

    _this.name = options.name || 'mongodb';
    _this.db = options.db;
    _this.options = options.options;

    if (!_this.options) {
      _this.options = {
        poolSize: 2,
        autoReconnect: true,
        useNewUrlParser: true
      };
    }

    _this.collection = options.collection || 'log';
    _this.level = options.level || 'info';
    _this.silent = options.silent;
    _this.storeHost = options.storeHost;
    _this.label = options.label;
    _this.capped = options.capped;
    _this.cappedSize = options.cappedSize || 10000000;
    _this.cappedMax = options.cappedMax;
    _this.decolorize = options.decolorize;
    _this.leaveConnectionOpen = options.leaveConnectionOpen;
    _this.expireAfterSeconds = !_this.capped && options.expireAfterSeconds;

    if (_this.storeHost) {
      _this.hostname = os__WEBPACK_IMPORTED_MODULE_1___default.a.hostname();
    }

    _this._opQueue = [];

    var self = _assertThisInitialized(_this);

    function setupDatabaseAndEmptyQueue(db) {
      return createCollection(db).then(function (db) {
        self.logDb = db;
        processOpQueue();
      }, function (err) {
        if (self.mongoClient && !self.leaveConnectionOpen) {
          self.mongoClient.close();
        }

        console.error('winston-mongodb, initialization error: ', err);
      });
    }

    function processOpQueue() {
      self._opQueue.forEach(function (_ref) {
        var method = _ref.method,
            args = _ref.args;
        return self[method].apply(self, args);
      });

      delete self._opQueue;
    }

    function createCollection(db) {
      var opts = Object.assign({
        strict: false
      }, self.capped ? {
        capped: true,
        size: self.cappedSize,
        max: self.cappedMax
      } : {});
      return db.createCollection(self.collection, opts).then(function (col) {
        var ttlIndexName = 'timestamp_1';
        var indexOpts = {
          name: ttlIndexName,
          background: true
        };

        if (self.expireAfterSeconds) {
          indexOpts.expireAfterSeconds = self.expireAfterSeconds;
        }

        return col.indexInformation({
          full: true
        }).then(function (info) {
          info = info.filter(function (_ref2) {
            var name = _ref2.name;
            return name === ttlIndexName;
          });

          if (info.length === 0) {
            // if its a new index then create it
            return col.createIndex({
              timestamp: -1
            }, indexOpts);
          } else {
            // if index existed with the same name check if expireAfterSeconds param has changed
            if (info[0].expireAfterSeconds !== undefined && info[0].expireAfterSeconds !== self.expireAfterSeconds) {
              return col.dropIndex(ttlIndexName).then(function () {
                return col.createIndex({
                  timestamp: -1
                }, indexOpts);
              });
            }
          }
        });
      }).then(function () {
        return db;
      });
    }

    function connectToDatabase(logger) {
      return mongodb__WEBPACK_IMPORTED_MODULE_2___default.a.MongoClient.connect(logger.db, logger.options).then(function (client) {
        logger.mongoClient = client;
        setupDatabaseAndEmptyQueue(client.db());
      }, function (err) {
        console.error('winston-mongodb: error initialising logger', err);

        if (options.tryReconnect) {
          console.log('winston-mongodb: will try reconnecting in 10 seconds');
          return new Promise(function (resolve) {
            return setTimeout(resolve, 10000);
          }).then(function () {
            return connectToDatabase(logger);
          });
        }
      });
    }

    if ('string' === typeof _this.db) {
      connectToDatabase(_assertThisInitialized(_this));
    } else if ('function' === typeof _this.db.then) {
      _this.db.then(function (client) {
        _this.mongoClient = client;
        setupDatabaseAndEmptyQueue(client.db());
      }, function (err) {
        return console.error('winston-mongodb: error initialising logger from promise', err);
      });
    } else if ('function' === typeof _this.db.db) {
      _this.mongoClient = _this.db;
      setupDatabaseAndEmptyQueue(_this.db.db());
    } else {
      // preconnected object
      console.warn('winston-mongodb: preconnected object support is deprecated and will be removed in v5');
      setupDatabaseAndEmptyQueue(_this.db);
    }

    return _this;
  }
  /**
   * Closes MongoDB connection so using process would not hang up.
   * Used by winston Logger.close on transports.
   */


  _createClass(MongoDB, [{
    key: "close",
    value: function close() {
      var _this2 = this;

      this.logDb = null;

      if (!this.mongoClient || this.leaveConnectionOpen) {
        return;
      }

      this.mongoClient.close().then(function () {
        return _this2.mongoClient = null;
      })["catch"](function (err) {
        console.error('Winston MongoDB transport encountered on error during ' + 'closing.', err);
      });
    }
    /**
     * Core logging method exposed to Winston. Metadata is optional.
     * @param {Object} info Logging metadata
     * @param {Function} cb Continuation to respond to when complete.
     */

  }, {
    key: "log",
    value: function log(info, cb) {
      var _this3 = this;

      if (!this.logDb) {
        this._opQueue.push({
          method: 'log',
          args: arguments
        });

        return true;
      }

      if (!cb) {
        cb = function cb() {};
      } // Avoid reentrancy that can be not assumed by database code.
      // If database logs, better not to call database itself in the same call.


      process.nextTick(function () {
        if (_this3.silent) {
          cb(null, true);
        }

        var decolorizeRegex = new RegExp(/\u001b\[[0-9]{1,2}m/g);
        var entry = {
          timestamp: new Date(),
          level: _this3.decolorize ? info.level.replace(decolorizeRegex, '') : info.level
        };

        var messageOriginal = info.message,
            level = info.level,
            meta = _objectWithoutProperties(info, ["message", "level"]);

        var message = util__WEBPACK_IMPORTED_MODULE_0___default.a.format.apply(util__WEBPACK_IMPORTED_MODULE_0___default.a, [info.message].concat(_toConsumableArray(info.splat || [])));
        entry.message = _this3.decolorize ? message.replace(decolorizeRegex, '') : message;
        entry.meta = _helpers__WEBPACK_IMPORTED_MODULE_6___default.a.prepareMetaData(meta);

        if (_this3.storeHost) {
          entry.hostname = _this3.hostname;
        }

        if (_this3.label) {
          entry.label = _this3.label;
        }

        _this3.logDb.collection(_this3.collection).insertOne(entry).then(function () {
          _this3.emit('logged');

          cb(null, true);
        })["catch"](function (err) {
          _this3.emit('error', err);

          cb(err);
        });
      });
      return true;
    }
    /**
     * Query the transport. Options object is optional.
     * @param {Object=} opt_options Loggly-like query options for this instance.
     * @param {Function} cb Continuation to respond to when complete.
     * @return {*}
     */

  }, {
    key: "query",
    value: function query(opt_options, cb) {
      if (!this.logDb) {
        this._opQueue.push({
          method: 'query',
          args: arguments
        });

        return;
      }

      if ('function' === typeof opt_options) {
        cb = opt_options;
        opt_options = {};
      }

      var options = this.normalizeQuery(opt_options);
      var query = {
        timestamp: {
          $gte: options.from,
          $lte: options.until
        }
      };
      var opt = {
        skip: options.start,
        limit: options.rows,
        sort: {
          timestamp: options.order === 'desc' ? -1 : 1
        }
      };

      if (options.fields) {
        opt.fields = options.fields;
      }

      this.logDb.collection(this.collection).find(query, opt).toArray().then(function (docs) {
        if (!options.includeIds) {
          // docs.forEach(({ _id }) => delete _id);
          docs = docs.map(function (doc) {
            var local = Object.assign(doc);
            delete local._id;
            return local;
          });
        }

        cb(null, docs);
      })["catch"](cb);
    }
    /**
     * Returns a log stream for this transport. Options object is optional.
     * This will only work with a capped collection.
     * @param {Object} options Stream options for this instance.
     * @param {Stream} stream Pass in a pre-existing stream.
     * @return {Stream}
     */

  }, {
    key: "stream",
    value: function stream() {
      var _this4 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new stream__WEBPACK_IMPORTED_MODULE_5__["Stream"]();

      var start = options.start;

      if (!this.logDb) {
        this._opQueue.push({
          method: 'stream',
          args: [options, _stream]
        });

        return _stream;
      }

      _stream.destroy = function () {
        this.destroyed = true;
      };

      if (start === -1) {
        start = null;
      }

      var col = this.logDb.collection(this.collection);

      if (start != null) {
        col.find({}, {
          skip: start
        }).toArray().then(function (docs) {
          docs.forEach(function (doc) {
            if (!options.includeIds) {
              delete doc._id;
            }

            _stream.emit('log', doc);
          });
          delete options.start;

          _this4.stream(options, _stream);
        })["catch"](function (err) {
          return _stream.emit('error', err);
        });
        return _stream;
      }

      if (_stream.destroyed) {
        return _stream;
      }

      col.isCapped().then(function (capped) {
        if (!capped) {
          return _this4.streamPoll(options, _stream);
        }

        var cursor = col.find({}, {
          tailable: true
        });

        _stream.destroy = function () {
          this.destroyed = true;
          cursor.destroy();
        };

        cursor.on('data', function (doc) {
          if (!options.includeIds) {
            delete doc._id;
          }

          _stream.emit('log', doc);
        });
        cursor.on('error', function (err) {
          return _stream.emit('error', err);
        });
      })["catch"](function (err) {
        return _stream.emit('error', err);
      });
      return _stream;
    }
    /**
     * Returns a log stream for this transport. Options object is optional.
     * @param {Object} options Stream options for this instance.
     * @param {Stream} stream Pass in a pre-existing stream.
     * @return {Stream}
     */

  }, {
    key: "streamPoll",
    value: function streamPoll() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new stream__WEBPACK_IMPORTED_MODULE_5__["Stream"]();
      var self = this;
      var start = options.start;
      var last;

      if (!this.logDb) {
        this._opQueue.push({
          method: 'streamPoll',
          args: [options, stream]
        });

        return stream;
      }

      if (start === -1) {
        start = null;
      }

      if (start == null) {
        last = new Date(new Date() - 1000);
      }

      stream.destroy = function () {
        this.destroyed = true;
      };

      (function check() {
        var query = last ? {
          timestamp: {
            $gte: last
          }
        } : {};
        self.logDb.collection(self.collection).find(query).toArray().then(function (docs) {
          if (stream.destroyed) {
            return;
          }

          if (!docs.length) {
            return next();
          }

          if (start == null) {
            docs.forEach(function (doc) {
              if (!options.includeIds) {
                delete doc._id;
              }

              stream.emit('log', doc);
            });
          } else {
            docs.forEach(function (doc) {
              if (!options.includeIds) {
                delete doc._id;
              }

              if (!start) {
                stream.emit('log', doc);
              } else {
                start -= 1;
              }
            });
          }

          last = new Date(docs.pop().timestamp);
          next();
        })["catch"](function (err) {
          if (stream.destroyed) {
            return;
          }

          next();
          stream.emit('error', err);
        });

        function next() {
          setTimeout(check, 2000);
        }
      })();

      return stream;
    }
  }]);

  return MongoDB;
}(winston_transport__WEBPACK_IMPORTED_MODULE_4___default.a);
/**
 * Define a getter so that `winston.transports.MongoDB`
 * is available and thus backwards compatible.
 */

winston__WEBPACK_IMPORTED_MODULE_3___default.a.transports.MongoDB = MongoDB;

/***/ })
/******/ ]);